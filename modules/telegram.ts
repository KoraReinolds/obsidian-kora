import { App, TFile, Notice } from 'obsidian';
import { ImageUtils } from './image-utils';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Telegram –±–æ—Ç–∞
 */
export interface TelegramSettings {
	botToken: string;
	chatId: string;
	enabled: boolean;
	customIconUrl?: string;
	stickerFileId?: string;
	sendAsPhoto?: boolean;
	customEmojis?: EmojiMapping[];  // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
	useCustomEmojis?: boolean;      // –í–∫–ª—é—á–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API
 */
interface TelegramResponse {
	ok: boolean;
	result?: any;
	description?: string;
}

/**
 * MessageEntity –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
 */
interface MessageEntity {
	type: string;
	offset: number;
	length: number;
	custom_emoji_id?: string;
}

/**
 * –ú–∞–ø–ø–∏–Ω–≥ –æ–±—ã—á–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ
 */
export interface EmojiMapping {
	standard: string;      // –û–±—ã—á–Ω—ã–π —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üìù")
	customId: string;      // ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
	description?: string;  // –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è UI
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
 */
export class TelegramBot {
	private app: App;
	private settings: TelegramSettings;

	constructor(app: App, settings: TelegramSettings) {
		this.app = app;
		this.settings = settings;
	}

	/**
	 * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
	 */
	updateSettings(settings: TelegramSettings) {
		this.settings = settings;
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
	 */
	isConfigured(): boolean {
		return this.settings.enabled && 
			   this.settings.botToken.length > 0 && 
			   this.settings.chatId.length > 0;
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª
	 */
	async sendMessage(text: string): Promise<boolean> {
		if (!this.isConfigured()) {
			new Notice('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
			return false;
		}

		const url = `https://api.telegram.org/bot${this.settings.botToken}/sendMessage`;
		
		// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ entities –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
		const { processedText, entities } = this.processCustomEmojis(text);
		
		const payload: any = {
			chat_id: this.settings.chatId,
			// text: processedText,
      text: '\ud83d\uddff'
		};

		// –î–æ–±–∞–≤–ª—è–µ–º entities –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏
		if (entities && entities.length > 0) {
			payload.entities = entities;
		}

    console.log(payload);
		try {
			const response = await fetch(url, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(payload),
			});

			const result: TelegramResponse = await response.json();

			if (result.ok) {
				new Notice('–ó–∞–º–µ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!');
				return true;
			} else {
				new Notice(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.description}`);
				return false;
			}
		} catch (error) {
			new Notice(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
			return false;
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É –≤ Telegram –∫–∞–Ω–∞–ª
	 */
	async sendFile(file: TFile): Promise<boolean> {
		if (!file) {
			new Notice('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
			return false;
		}

		try {
			const content = await this.app.vault.read(file);
			const fileName = file.name;
			
			// –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∏–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
			if (this.settings.stickerFileId) {
				await this.sendSticker(this.settings.stickerFileId);
			}
			
			// –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ —Ñ–æ—Ç–æ –∏ –µ—Å—Ç—å URL –∏–∫–æ–Ω–∫–∏
			if (this.settings.sendAsPhoto && this.settings.customIconUrl) {
				// const caption = this.formatMessage(fileName, content);
				return await this.sendPhoto(this.settings.customIconUrl, content);
			} else {
				// –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				// const message = this.formatMessage('', content);
				return await this.sendMessage(content);
			}
		} catch (error) {
			new Notice(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
			return false;
		}
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
	 */
	private formatMessage(fileName: string, content: string): string {
		// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
		const escapedFileName = this.escapeMarkdownV2(fileName);
		const escapedContent = this.escapeMarkdownV2(content);
		
		return `üìù *${escapedFileName}*\n\n${escapedContent}`;
	}

	/**
	 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
	 */
	private escapeMarkdownV2(text: string): string {
		// –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
		const specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
		
		let escaped = text;
		specialChars.forEach(char => {
			escaped = escaped.replace(new RegExp(`\\${char}`, 'g'), `\\${char}`);
		});
		
		return escaped;
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
	 */
	private processCustomEmojis(text: string): { processedText: string; entities: MessageEntity[] } {
		if (!this.settings.useCustomEmojis || !this.settings.customEmojis || this.settings.customEmojis.length === 0) {
			return { processedText: text, entities: [] };
		}

		const processedText = text;
		const entities: MessageEntity[] = [];

		// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–∞–º
		this.settings.customEmojis.forEach(mapping => {
			const regex = new RegExp(this.escapeRegExp(mapping.standard), 'g');
			let match;

			// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
			while ((match = regex.exec(text)) !== null) {
				entities.push({
					type: 'custom_emoji',
					offset: match.index,
					length: mapping.standard.length,
					custom_emoji_id: mapping.customId
				});
			}
		});

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º entities –ø–æ offset –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		entities.sort((a, b) => a.offset - b.offset);

		return { processedText, entities };
	}

	/**
	 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –¥–ª—è RegExp
	 */
	private escapeRegExp(string: string): string {
		return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ Telegram
	 */
	async sendPhoto(photoUrl: string, caption?: string): Promise<boolean> {
		if (!this.isConfigured()) {
			new Notice('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
			return false;
		}

		// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		const validation = await ImageUtils.validateForTelegram(photoUrl);
		if (!validation.valid) {
			new Notice(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${validation.errors.join(', ')}`);
			return false;
		}

		const url = `https://api.telegram.org/bot${this.settings.botToken}/sendPhoto`;
		
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ –ø–æ–¥–ø–∏—Å–∏
		const { processedText, entities } = this.processCustomEmojis(caption || '');
		
		const payload: any = {
			chat_id: this.settings.chatId,
			photo: photoUrl,
			caption: processedText,
			parse_mode: 'MarkdownV2'
		};

		// –î–æ–±–∞–≤–ª—è–µ–º entities –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏
		if (entities && entities.length > 0) {
			payload.caption_entities = entities;
		}

		try {
			const response = await fetch(url, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(payload),
			});

			const result: TelegramResponse = await response.json();

			if (result.ok) {
				new Notice('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!');
				return true;
			} else {
				new Notice(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${result.description}`);
				return false;
			}
		} catch (error) {
			new Notice(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
			return false;
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ Telegram
	 */
	async sendSticker(stickerFileId: string): Promise<boolean> {
		if (!this.isConfigured()) {
			new Notice('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
			return false;
		}

		const url = `https://api.telegram.org/bot${this.settings.botToken}/sendSticker`;
		
		const payload = {
			chat_id: this.settings.chatId,
			sticker: stickerFileId
		};

		try {
			const response = await fetch(url, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(payload),
			});

			const result: TelegramResponse = await response.json();

			if (result.ok) {
				return true;
			} else {
				new Notice(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: ${result.description}`);
				return false;
			}
		} catch (error) {
			new Notice(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
			return false;
		}
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
	 */
	async testConnection(): Promise<boolean> {
		if (!this.settings.botToken) {
			new Notice('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
			return false;
		}

		const url = `https://api.telegram.org/bot${this.settings.botToken}/getMe`;

		try {
			const response = await fetch(url);
			const result: TelegramResponse = await response.json();

			if (result.ok) {
				new Notice(`–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${result.result.username}`);
				return true;
			} else {
				new Notice(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.description}`);
				return false;
			}
		} catch (error) {
			new Notice(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
			return false;
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π
	 */
	async sendTestWithIcon(): Promise<boolean> {
		const testMessage = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π üìù üéâ";
		
		// –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∏–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
		if (this.settings.stickerFileId) {
			await this.sendSticker(this.settings.stickerFileId);
		}
		
		// –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ —Ñ–æ—Ç–æ –∏ –µ—Å—Ç—å URL –∏–∫–æ–Ω–∫–∏
		if (this.settings.sendAsPhoto && this.settings.customIconUrl) {
			return await this.sendPhoto(this.settings.customIconUrl, testMessage);
		} else {
			return await this.sendMessage(testMessage);
		}
	}

	/**
	 * –î–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
	 */
	addCustomEmojiMapping(standard: string, customId: string, description?: string): void {
		if (!this.settings.customEmojis) {
			this.settings.customEmojis = [];
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –º–∞–ø–ø–∏–Ω–≥
		const existingIndex = this.settings.customEmojis.findIndex(m => m.standard === standard);
		
		if (existingIndex !== -1) {
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
			this.settings.customEmojis[existingIndex] = { standard, customId, description };
		} else {
			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
			this.settings.customEmojis.push({ standard, customId, description });
		}
	}

	/**
	 * –£–¥–∞–ª–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
	 */
	removeCustomEmojiMapping(standard: string): void {
		if (!this.settings.customEmojis) return;

		this.settings.customEmojis = this.settings.customEmojis.filter(m => m.standard !== standard);
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
	 */
	getCustomEmojiMappings(): EmojiMapping[] {
		return this.settings.customEmojis || [];
	}

	/**
	 * –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
	 */
	async testCustomEmojis(): Promise<boolean> {
		if (!this.settings.useCustomEmojis || !this.settings.customEmojis || this.settings.customEmojis.length === 0) {
			new Notice('–ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
			return false;
		}

		// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
		const emojiList = this.settings.customEmojis.map(m => m.standard).join(' ');
		const testMessage = `üß™ –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏: ${emojiList}`;
		
		return await this.sendMessage(testMessage);
	}
} 