/**
 * Note UI System - —Å–∏—Å—Ç–µ–º–∞ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ UI –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–∑–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç path –∑–∞–º–µ—Ç–∫–∏ –∏ frontmatter
 */

import { TFile, WorkspaceLeaf, App } from 'obsidian';
import { VectorBridge } from '../vector';
import { UIPluginRenderer } from '../ui-plugins';
import type { KoraMcpPluginSettings } from '../../main';
import type { UIPluginManager } from '../ui-plugins';

export interface NoteUIContext {
  file: TFile;
  leaf: WorkspaceLeaf;
  app: App;
  frontmatter: any;
  settings: KoraMcpPluginSettings;
  vectorBridge: VectorBridge;
  getFileContent: (file: TFile) => Promise<string>;
}

export interface NoteUIRenderer {
  id: string;
  name: string;
  shouldRender(context: NoteUIContext): boolean;
  render(containerEl: HTMLElement, context: NoteUIContext): Promise<void>;
  cleanup?(containerEl: HTMLElement): void;
}

export class NoteUISystem {
  private renderers: Map<string, NoteUIRenderer> = new Map();
  private activeRenderers: Map<string, Set<string>> = new Map(); // filePath -> renderIds
  private uiPluginManager?: UIPluginManager;
  
  constructor(uiPluginManager?: UIPluginManager) {
    this.uiPluginManager = uiPluginManager;
    this.registerBuiltInRenderers();
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤
   */
  private registerBuiltInRenderers() {
    // UI Plugins Renderer - flexible button system
    if (this.uiPluginManager) {
      this.registerRenderer(new UIPluginRenderer(this.uiPluginManager));
    }

    // Vector Stats Renderer –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ —Å vector: true
    this.registerRenderer(new VectorStatsRenderer());

    // Note: chunk preview moved to native sidebar view (ChunkView)
    // Note: TelegramChannelRenderer removed - replaced by flexible UI plugins
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ UI –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
   */
  registerRenderer(renderer: NoteUIRenderer) {
    this.renderers.set(renderer.id, renderer);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
   */
  unregisterRenderer(rendererId: string) {
    this.renderers.delete(rendererId);
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ UI –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
   */
  async renderNoteUI(containerEl: HTMLElement, context: NoteUIContext) {
    const filePath = context.file.path;
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    this.cleanupFileRenderers(containerEl, filePath);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ frontmatter
    const cache = context.app.metadataCache.getFileCache(context.file);
    context.frontmatter = cache?.frontmatter || {};
    
    const activeRenderers = new Set<string>();
    
    // –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞–º
    for (const [rendererId, renderer] of this.renderers) {
      try {
        if (renderer.shouldRender(context)) {
          // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
      const rendererContainer = containerEl.createDiv({
            cls: `note-ui-renderer note-ui-${rendererId}`
          });
          rendererContainer.setAttribute('data-renderer-id', rendererId);
          
          await renderer.render(rendererContainer, context);
          activeRenderers.add(rendererId);
        }
      } catch (error) {
        console.error(`Error rendering ${rendererId} for ${filePath}:`, error);
      }
    }
    
    this.activeRenderers.set(filePath, activeRenderers);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞
   */
  private cleanupFileRenderers(containerEl: HTMLElement, filePath: string) {
    const activeRenderers = this.activeRenderers.get(filePath);
    if (!activeRenderers) return;

    for (const rendererId of activeRenderers) {
      const renderer = this.renderers.get(rendererId);
      const rendererContainer = containerEl.querySelector(`[data-renderer-id="${rendererId}"]`);
      
      if (renderer?.cleanup && rendererContainer) {
        try {
          renderer.cleanup(rendererContainer as HTMLElement);
        } catch (error) {
          console.error(`Error cleaning up ${rendererId}:`, error);
        }
      }
      
      rendererContainer?.remove();
    }
    
    this.activeRenderers.delete(filePath);
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤
   */
  cleanup() {
    this.activeRenderers.clear();
  }
}

// Telegram Channel renderer removed - replaced by flexible UI plugins system

/**
 * –†–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
class VectorStatsRenderer implements NoteUIRenderer {
  id = 'vector-stats';
  name = 'Vector Stats UI';

  shouldRender(context: NoteUIContext): boolean {
    const { frontmatter } = context;
    return frontmatter?.vector === true || frontmatter?.show_vector_stats === true;
  }

  async render(containerEl: HTMLElement, context: NoteUIContext): Promise<void> {
    const { vectorBridge } = context;
    
    const statsContainer = containerEl.createEl('div', { cls: 'vector-stats-container' });
    statsContainer.style.cssText = `
      background: var(--background-secondary);
      border-radius: 8px;
      padding: 15px;
      margin: 10px 0;
    `;

    const headerEl = statsContainer.createEl('h4', { 
      text: 'üîç –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
      cls: 'vector-stats-header' 
    });
    headerEl.style.margin = '0 0 10px 0';

    const loadingEl = statsContainer.createEl('div', { text: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...' });

    try {
      const stats = await vectorBridge.getStats();
      loadingEl.remove();

      const statsEl = statsContainer.createEl('div', { cls: 'vector-stats-content' });
      statsEl.innerHTML = `
        <div><strong>–ö–æ–ª–ª–µ–∫—Ü–∏—è:</strong> ${stats.collection}</div>
        <div><strong>–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</strong> ${stats.totalPoints}</div>
        <div><strong>–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤:</strong> ${stats.vectorSize}</div>
        <div><strong>–°—Ç–∞—Ç—É—Å:</strong> ${stats.status}</div>
      `;

      if (stats.contentTypeBreakdown) {
        const breakdownEl = statsContainer.createEl('div', { cls: 'content-breakdown' });
        breakdownEl.innerHTML = '<strong>–ü–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</strong>';
        
        Object.entries(stats.contentTypeBreakdown).forEach(([type, count]) => {
          breakdownEl.innerHTML += `<div style="margin-left: 15px;">‚Ä¢ ${type}: ${count}</div>`;
        });
      }

    } catch (error) {
      loadingEl.textContent = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`;
    }
  }
}

// Chunk preview renderer removed from in-note UI