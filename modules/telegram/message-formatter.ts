/**
 * Utilities for formatting messages for different platforms
 */

import {
	MarkdownToTelegramConverter,
	type ConversionOptions,
	type ConversionResult,
	type InlineButton,
} from './markdown-to-telegram-converter';
import { App } from 'obsidian';
import {
	FrontmatterUtils,
	VaultOperations,
	getMarkdownFiles,
} from '../obsidian';
import { ChannelConfigService } from './channel-config-service';

export interface EmojiMapping {
	standard: string; // –û–±—ã—á–Ω—ã–π —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üìù")
	customId: string; // ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
	description?: string; // –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è UI
}

export interface MessageEntity {
	type: string;
	offset: number;
	length: number;
	custom_emoji_id?: string;
}

/**
 * Generate Telegram post URL from channel ID and message ID.
 * @param channelId The channel ID (numeric or username).
 * @param messageId The message ID.
 * @returns The Telegram post URL.
 */
export function generateTelegramPostUrl(
	channelId: string,
	messageId: number
): string {
	if (/^-?\d+$/.test(channelId)) {
		let numericId = `${channelId}`;
		if (numericId.startsWith('-100')) {
			numericId = numericId.slice(4); // Remove '-100' prefix
		} else if (numericId.startsWith('-')) {
			numericId = numericId.slice(1); // Remove just '-' prefix
		}
		return `https://t.me/c/${numericId}/${messageId}`;
	} else {
		throw new Error('Unknown channel format');
	}
}

export class MessageFormatter {
	private customEmojis: EmojiMapping[];
	private useCustomEmojis: boolean;
	private markdownConverter: MarkdownToTelegramConverter;
	private app?: App;
	private frontmatterUtils?: FrontmatterUtils;
	private vaultOperations?: VaultOperations;
	private channelConfigService?: ChannelConfigService;

	constructor(
		customEmojis: EmojiMapping[] = [],
		useCustomEmojis = false,
		app?: App,
		channelConfigService?: ChannelConfigService
	) {
		this.customEmojis = customEmojis;
		this.useCustomEmojis = useCustomEmojis;
		this.markdownConverter = new MarkdownToTelegramConverter();
		this.app = app;
		this.channelConfigService = channelConfigService;
		if (app) {
			this.frontmatterUtils = new FrontmatterUtils(app);
			this.vaultOperations = new VaultOperations(app);
		}
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
	 */
	formatMessage(fileName: string, content: string): string {
		// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
		const escapedFileName = this.escapeMarkdownV2(fileName);
		const escapedContent = this.escapeMarkdownV2(content);

		return `üìù *${escapedFileName}*\n\n${escapedContent}`;
	}

	/**
	 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
	 */
	escapeMarkdownV2(text: string): string {
		// –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
		const specialChars = [
			'_',
			'*',
			'[',
			']',
			'(',
			')',
			'~',
			'`',
			'>',
			'#',
			'+',
			'-',
			'=',
			'|',
			'{',
			'}',
			'.',
			'!',
		];

		let escaped = text;
		specialChars.forEach(char => {
			escaped = escaped.replace(new RegExp(`\\${char}`, 'g'), `\\${char}`);
		});

		return escaped;
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
	 */
	processCustomEmojis(text: string): {
		processedText: string;
		entities: MessageEntity[];
	} {
		if (
			!this.useCustomEmojis ||
			!this.customEmojis ||
			this.customEmojis.length === 0
		) {
			return { processedText: text, entities: [] };
		}

		const processedText = text;
		const entities: MessageEntity[] = [];

		// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–∞–º
		this.customEmojis.forEach(mapping => {
			const regex = new RegExp(this.escapeRegExp(mapping.standard), 'g');
			let match;

			// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
			while ((match = regex.exec(text)) !== null) {
				entities.push({
					type: 'custom_emoji',
					offset: match.index,
					length: mapping.standard.length,
					custom_emoji_id: mapping.customId,
				});
			}
		});

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º entities –ø–æ offset –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		entities.sort((a, b) => a.offset - b.offset);

		return { processedText, entities };
	}

	/**
	 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –¥–ª—è RegExp
	 */
	private escapeRegExp(string: string): string {
		return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	/**
	 * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏
	 */
	updateEmojiSettings(customEmojis: EmojiMapping[], useCustomEmojis: boolean) {
		this.customEmojis = customEmojis;
		this.useCustomEmojis = useCustomEmojis;
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
	 */
	getCustomEmojiMappings(): EmojiMapping[] {
		return this.customEmojis || [];
	}

	/**
	 * –î–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
	 */
	addCustomEmojiMapping(
		standard: string,
		customId: string,
		description?: string
	): void {
		if (!this.customEmojis) {
			this.customEmojis = [];
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –º–∞–ø–ø–∏–Ω–≥
		const existingIndex = this.customEmojis.findIndex(
			m => m.standard === standard
		);

		if (existingIndex !== -1) {
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
			this.customEmojis[existingIndex] = { standard, customId, description };
		} else {
			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
			this.customEmojis.push({ standard, customId, description });
		}
	}

	/**
	 * –£–¥–∞–ª–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
	 */
	removeCustomEmojiMapping(standard: string): void {
		if (!this.customEmojis) return;

		this.customEmojis = this.customEmojis.filter(m => m.standard !== standard);
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å markdown –∑–∞–º–µ—Ç–∫—É –¥–ª—è Telegram
	 */
	async formatMarkdownNote(
		fileName: string,
		markdownContent: string,
		options?: ConversionOptions
	): Promise<ConversionResult> {
		// –£–±–∏—Ä–∞–µ–º frontmatter –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Å—ã–ª–æ–∫
		const contentWithoutFrontmatter =
			this.markdownConverter.removeFrontmatter(markdownContent);

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Obsidian —Å—Å—ã–ª–∫–∏ –≤ telegram URL –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
		const processedContent = await this.convertObsidianLinksToTelegramUrls(
			contentWithoutFrontmatter
		);

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ telegram —Ñ–æ—Ä–º–∞—Ç
		const conversionResult = this.markdownConverter.convert(
			processedContent,
			options
		);

		// –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏ –∏–∑ frontmatter
		const buttons = await this.getButtonsFromFrontmatter(fileName);

		// –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
		const finalText = conversionResult.text;

		// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º offset'—ã entities —Å —É—á–µ—Ç–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
		const adjustedEntities =
			conversionResult.entities?.map(entity => ({
				...entity,
				offset: entity.offset,
			})) || [];

		return {
			...conversionResult,
			text: finalText,
			entities: adjustedEntities,
			buttons: buttons,
		};
	}

	/**
	 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å markdown –≤ telegram —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
	 */
	convertMarkdownToTelegram(
		markdownContent: string,
		options?: ConversionOptions
	): ConversionResult {
		return this.markdownConverter.convert(markdownContent, options);
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä markdown –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	 */
	getMarkdownConverter(): MarkdownToTelegramConverter {
		return this.markdownConverter;
	}

	/**
	 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Obsidian —Å—Å—ã–ª–æ–∫ [[file|text]]
	 */
	private async parseObsidianLinks(
		content: string
	): Promise<
		Array<{ fileName: string; displayText: string; telegramUrl: string }>
	> {
		const obsidianLinkRegex = /\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/g;
		const matches = Array.from(content.matchAll(obsidianLinkRegex));

		const results = await Promise.all(
			matches.map(async match => {
				const fileName = match[1];
				const displayText = match[2] || fileName;

				try {
					if (!this.app || !this.channelConfigService) {
						throw new Error('App and ChannelConfigService required');
					}

					// Find file by name using getMarkdownFiles with include pattern
					const files = getMarkdownFiles(this.app, {
						include: [fileName],
					});
					const file = files[0]; // Get first matching file
					if (!file) {
						throw new Error(`File "${fileName}" not found`);
					}

					const channelConfigs =
						await this.channelConfigService.getChannelConfigsForFile(file);
					const publishedConfig = channelConfigs.find(
						config => config.messageId
					);

					if (!publishedConfig?.messageId) {
						throw new Error(`File "${fileName}" is not published`);
					}

					const telegramUrl = generateTelegramPostUrl(
						publishedConfig.channelId,
						publishedConfig.messageId
					);

					return { fileName, displayText, telegramUrl };
				} catch (error) {
					throw new Error(
						`Failed to process link ${match[0]}: ${error.message}`
					);
				}
			})
		);

		return results;
	}

	/**
	 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Obsidian —Å—Å—ã–ª–∫–∏ [[file|text]] –≤ Telegram URL [text](https://t.me/...)
	 */
	private async convertObsidianLinksToTelegramUrls(
		content: string
	): Promise<string> {
		const parsedLinks = await this.parseObsidianLinks(content);
		let result = content;

		// –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã
		const obsidianLinkRegex = /\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/g;
		const matches = Array.from(content.matchAll(obsidianLinkRegex)).reverse();

		matches.forEach((match, index) => {
			const linkInfo = parsedLinks[parsedLinks.length - 1 - index];
			const markdownLink = `[${linkInfo.displayText}](${linkInfo.telegramUrl})`;
			result =
				result.substring(0, match.index) +
				markdownLink +
				result.substring(match.index + match[0].length);
		});

		return result;
	}

	/**
	 * –ü–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª –∫–Ω–æ–ø–æ–∫ –≤ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è Telegram
	 */
	private async parseButtonsFile(
		buttonsContent: string
	): Promise<InlineButton[][]> {
		const lines = buttonsContent
			.trim()
			.split('\n')
			.filter(line => line.trim());
		const buttonRows: InlineButton[][] = [];

		for (const line of lines) {
			try {
				// –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å—Å—ã–ª–æ–∫
				const parsedLinks = await this.parseObsidianLinks(line);

				const rowButtons: InlineButton[] = parsedLinks.map(link => ({
					text: link.displayText,
					url: link.telegramUrl,
				}));

				if (rowButtons.length > 0) {
					buttonRows.push(rowButtons);
				}
			} catch (error) {
				console.warn(
					`Failed to parse buttons from line "${line}": ${error.message}`
				);
				// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ
			}
		}

		return buttonRows;
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∫–Ω–æ–ø–æ–∫ –∏–∑ frontmatter –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
	 */
	private async getButtonsFromFrontmatter(
		fileName: string
	): Promise<InlineButton[][] | undefined> {
		if (!this.app || !this.frontmatterUtils || !this.vaultOperations) {
			return undefined;
		}

		try {
			// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—è getMarkdownFiles —Å include –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
			const foundFiles = getMarkdownFiles(this.app, {
				include: [fileName],
			});
			const file = foundFiles[0]; // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
			if (!file) {
				console.warn(`File "${fileName}" not found`);
				return undefined;
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º FrontmatterUtils –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—è buttons
			const buttonsField = await this.frontmatterUtils.getFrontmatterField(
				file,
				'buttons'
			);

			if (!buttonsField) {
				return undefined;
			}

			// –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ [[filename]] –∏–∑ –ø–æ–ª—è
			const buttonsMatch = buttonsField.match(/\[\[([^\]]+)\]\]/);
			if (!buttonsMatch) {
				return undefined;
			}

			const buttonsFileName = buttonsMatch[1];

			// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—è getMarkdownFiles —Å include –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
			const buttonFiles = getMarkdownFiles(this.app, {
				include: [buttonsFileName],
			});
			const buttonsFile = buttonFiles[0]; // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
			if (!buttonsFile) {
				console.warn(`Buttons file "${buttonsFileName}" not found`);
				return undefined;
			}

			// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—è VaultOperations
			const buttonsContent =
				await this.vaultOperations.getFileContent(buttonsFile);

			// –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
			return await this.parseButtonsFile(buttonsContent);
		} catch (error) {
			console.warn(`Failed to get buttons from frontmatter: ${error.message}`);
			return undefined;
		}
	}
}
