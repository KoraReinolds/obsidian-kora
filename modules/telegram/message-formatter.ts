/**
 * Utilities for formatting messages for different platforms
 */

import { 
  MarkdownToTelegramConverter, 
  type ConversionOptions, 
  type ConversionResult 
} from './markdown-to-telegram-converter';

export interface EmojiMapping {
  standard: string;      // –û–±—ã—á–Ω—ã–π —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üìù")
  customId: string;      // ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
  description?: string;  // –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è UI
}

export interface MessageEntity {
  type: string;
  offset: number;
  length: number;
  custom_emoji_id?: string;
}

export class MessageFormatter {
  private customEmojis: EmojiMapping[];
  private useCustomEmojis: boolean;
  private markdownConverter: MarkdownToTelegramConverter;

  constructor(customEmojis: EmojiMapping[] = [], useCustomEmojis = false) {
    this.customEmojis = customEmojis;
    this.useCustomEmojis = useCustomEmojis;
    this.markdownConverter = new MarkdownToTelegramConverter();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
   */
  formatMessage(fileName: string, content: string): string {
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    const escapedFileName = this.escapeMarkdownV2(fileName);
    const escapedContent = this.escapeMarkdownV2(content);
    
    return `üìù *${escapedFileName}*\n\n${escapedContent}`;
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
   */
  escapeMarkdownV2(text: string): string {
    // –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    const specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    
    let escaped = text;
    specialChars.forEach(char => {
      escaped = escaped.replace(new RegExp(`\\${char}`, 'g'), `\\${char}`);
    });
    
    return escaped;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
   */
  processCustomEmojis(text: string): { processedText: string; entities: MessageEntity[] } {
    if (!this.useCustomEmojis || !this.customEmojis || this.customEmojis.length === 0) {
      return { processedText: text, entities: [] };
    }

    const processedText = text;
    const entities: MessageEntity[] = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–∞–º
    this.customEmojis.forEach(mapping => {
      const regex = new RegExp(this.escapeRegExp(mapping.standard), 'g');
      let match;

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
      while ((match = regex.exec(text)) !== null) {
        entities.push({
          type: 'custom_emoji',
          offset: match.index,
          length: mapping.standard.length,
          custom_emoji_id: mapping.customId
        });
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º entities –ø–æ offset –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    entities.sort((a, b) => a.offset - b.offset);

    return { processedText, entities };
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –¥–ª—è RegExp
   */
  private escapeRegExp(string: string): string {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏
   */
  updateEmojiSettings(customEmojis: EmojiMapping[], useCustomEmojis: boolean) {
    this.customEmojis = customEmojis;
    this.useCustomEmojis = useCustomEmojis;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
   */
  getCustomEmojiMappings(): EmojiMapping[] {
    return this.customEmojis || [];
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
   */
  addCustomEmojiMapping(standard: string, customId: string, description?: string): void {
    if (!this.customEmojis) {
      this.customEmojis = [];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –º–∞–ø–ø–∏–Ω–≥
    const existingIndex = this.customEmojis.findIndex(m => m.standard === standard);
    
    if (existingIndex !== -1) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
      this.customEmojis[existingIndex] = { standard, customId, description };
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
      this.customEmojis.push({ standard, customId, description });
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
   */
  removeCustomEmojiMapping(standard: string): void {
    if (!this.customEmojis) return;

    this.customEmojis = this.customEmojis.filter(m => m.standard !== standard);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å markdown –∑–∞–º–µ—Ç–∫—É –¥–ª—è Telegram
   */
  formatMarkdownNote(fileName: string, markdownContent: string, options?: ConversionOptions): ConversionResult {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ telegram —Ñ–æ—Ä–º–∞—Ç
    const conversionResult = this.markdownConverter.convert(markdownContent, options);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    const finalText = conversionResult.text;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º offset'—ã entities —Å —É—á–µ—Ç–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const adjustedEntities = conversionResult.entities?.map(entity => ({
      ...entity,
      offset: entity.offset
    })) || [];

    return {
      ...conversionResult,
      text: finalText,
      entities: adjustedEntities
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å markdown –≤ telegram —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
   */
  convertMarkdownToTelegram(markdownContent: string, options?: ConversionOptions): ConversionResult {
    return this.markdownConverter.convert(markdownContent, options);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä markdown –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
   */
  getMarkdownConverter(): MarkdownToTelegramConverter {
    return this.markdownConverter;
  }
}